h1. Основные модели параллельного программирования

h1. Содержание
# Введение
## Книга
## Concurrency or Parallelism?
# Threads and Syncronization
## Суть
## Пример
## Достоинства/недостатки
# Functional programming
# Actors
# CSP
# The Lambda Architecture
# Прочее (Data Parallelism и т.п.)
# Выводы

h1. Книга

Данная статья является кратким изложением книги "Seven Concurrency Models In Seven Weeks":http://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653.

__картинка с книгой__

h1. Введение

Для повышения производительности систем применяют многоядерные процессоры. Для крупных вычислительных систем применяют кластеры. Все это ведет к повышению значимости параллельного программирования. Алгоритмы, применяемые для параллельных систем несколько отличаются от алгоритмов для последовательных систем. Основные проблемы: как обеспечить доступ к общим ресурсам для нескольких параллельных процессов, и как сделать так, чтобы система работала на полную мощность.

h2. Concurrency или Parallelism?

Прежде, чем мы приступим к рассмотрению собственно моделей параллельного программирования, для начала разберемся с терминологией. Основные понятия, используемые при разработке параллельных программ __Concurrency__ и __Parallelism__ очень часто рассматриваются в одном контексте, и поэтому их часто путают. В чем же их различия? *Concurrency* - это когда один и тот же ресурс используется для одновременного выполнения нескольких задач.

__тут идет картинка с человеком, одновременно делающим много дел__

С другой стороны, __Parallelism__ - это когда одна большая задача разделяется на несколько более мелких, зачастую не связанных между собой задач, и они также выполняются одновременно, не мешая друг другу.

__тут картинка сборочного цеха на китайском заводе, где куча китайцев заняты производством одних и тех же вещей__
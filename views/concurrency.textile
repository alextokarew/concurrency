h1. Основные модели параллельного программирования

h1. Содержание
# Введение
## Книга
## Concurrency or Parallelism?
# Threads and Syncronization
## Суть
## Пример
## Достоинства/недостатки
# Functional programming
# Actors
# CSP
# The Lambda Architecture
# Прочее (Data Parallelism и т.п.)
# Выводы

h1. Книга

Данная статья написана по мотивам книги "Seven Concurrency Models In Seven Weeks":http://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653.

__картинка с книгой__

h1. Введение

Параллельное программирование само по себе не является чем-то новым. Однако из-за того, что в последнее десятилетие рост производительности процессоров достигается за счет увеличения числа ядер, его актуальность резко возрасла. Кроме того, все большее внимание уделяется распределенным кластеризованным системам, способным обрабатывать очень большие объемы данных. 

Даже привычные нам системы получают преимущество от использования параллельного программирования. Например, когда вы набираете программный код в IDE, она в фоновом режиме проверяет корректность синтаксиса. Для того, чтобы смотреть видео на YouTube необязательно ждать его полной загрузки. Приложение будет одновременно скачивать недостающие части, и показывать уже загруженные. Отказоустойчивость современных высоконагруженных серверов, таких как Google или Amazon, также достигается при помощи параллельного программирования.

Важность параллельного программирования растет с каждым днем. Рост интереса к таким языкам, как Scala, Go, Erlang, Haskell, Closure не в последнюю очередь связан с их мощной поддержкой параллельного программирования.

h2. Многопоточное и параллельное программирование.

Очень часть параллельное программирование отождествляют с многопоточным программированием. И хотя между ними есть много общего, это не совсем одно и тоже. Основная задача многопоточного программирования - это обеспечить согласованный доступ нескольких потоков выполнения к некоторому общему ресурсу. Сами же потоки необязательно должны выполняться в одно время. Примером многопоточной задачи являются системы резервирования билетов, где большое количество покупателей работают с единым хранилищем доступных мест.

__тут идет картинка с человеком, одновременно делающим много дел__
__Здесь множество потоков выполнения (дела) пытаются завладеть одним ресурсом (человеком, который их делает)__

Параллельное программирование же имеет дело с распределением выполнения одной задачи на несколько логических потоков. Пример задачи для параллельного программирования - анализ большого объема данных, когда исходный документ разбивается на части, и каждая часть обрабатывается в отдельном потоке (более подробный пример будет рассмотрен ниже).

__тут картинка сборочного цеха на китайском заводе, где куча китайцев заняты производством одних и тех же вещей__

По сути, необходимость в многопоточном программировании возникает при постановке задачи, когда необходимо иметь дело с событиями, возникающими одновременно. В то же время параллельное программирование - это один из способов для решения различных типов задач.

h2. Многопоточное программирование -Потоки- и синхронизация

Многопоточное программирование является 
Программирование для многопоточных систем относится к конкурентному программированию, так как мы сталкиваемся с 
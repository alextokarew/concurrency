<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title Java 8 и функциональное программирование
    %meta{:content => "A framework for easily creating beautiful presentations using HTML", :name => "description"}/
    %meta{:content => "Hakim El Hattab", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no", :name => "viewport"}/
    %link{:href => "css/reveal.min.css", :rel => "stylesheet"}/
    %link#theme{:href => "css/theme/moon.css", :rel => "stylesheet"}/
    / For syntax highlighting
    %link{:href => "lib/css/zenburn.css", :rel => "stylesheet"}/
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides
        %section
          %h1 Java 8
          %h5 и функциональное программирование

        %section
          %h2 Project Lambda (JSR-335)
          %ol
            %li.fragment First-class functions in java
            %li.fragment Ссылки на метод

        %section
          %h3 Функциональные литералы
          .fragment
            %pre
              %code
                :preserve
                  (String x, String y) -> {
                      return x.equals(y);
                  }
          .fragment
            %pre
              %code
                :preserve
                  (String x, String y) -> x.equals(y)
          .fragment
            %pre
              %code
                :preserve
                  (x, y) -> x.equals(y)
          .fragment
            %pre
              %code
                :preserve
                  x -> x.isEmpty()
          .fragment
            %pre
              %code
                :preserve
                  () -> Integer.valueOf(42)

        %section
          %h3 Указатели на методы
          .fragment
            %pre
              %code
                :preserve
                  Integer::sum      ==    (x, y) -> Integer.sum(x,y)
          .fragment
            %pre
              %code
                :preserve
                  String::length    ==    s -> s.length
          .fragment
            %pre
              %code
                :preserve
                  String s = "Some string";
                  s::indexOf        ==    c -> s.indexOf(c)

        %section
          %h4 Какого же типа должна быть переменная, которой мы присваиваем функциональный литерал?
          %h4.fragment Какого угодно, если тип переменной удовлетворяет критерию функционального интерфейса!
          %h4.fragment Функциональный интерфейс - один абстрактный метод!
          .fragment
            %pre
              %code
                :preserve
                  @FunctionalInterface
                  public interface Runnable {
                      void run();
                  }

        %section
          %h3 Новые функциональные интерфейсы Java 8
          .fragment
            %pre
              %code
                :preserve
                  @FunctionalInterface
                  public interface Function&lt;T, R&gt; {
                      R apply(T t);
                  }
          .fragment
            %pre
              %code
                :preserve
                  @FunctionalInterface
                  public interface Predicate&lt;T&gt; {
                      boolean test(T t);
                  }
          .fragment
            %pre
              %code
                :preserve
                  @FunctionalInterface
                  public interface Consumer&lt;T&gt; {
                      void accept(T t);
                  }
          .fragment
            %pre
              %code
                :preserve
                  @FunctionalInterface
                  public interface Supplier&lt;T&gt; {
                      T get();
                  }

        %section
          %h2 Некоторые паттерны использования

        %section
          %h3 Execute around
          %pre
            %code
              :preserve
                public void doSomeHardWork (Consumer&lt;SomeType> consumer) {
                    SomeType something = new SomeType();
                    //Initialization of something
                    consumer.accept(something);
                    //Finalization of something
                }
                ...
                doSomeHardWork(s -> s.oneThing());
                ...
                doSomeHardWork(s -> s.anotherThing());
        %section
          %h3 Lazy evaluation
          .fragment
            %p Было
            %pre
              %code
                :preserve
                  if (logger.isLoggable(Log.FINER)) {
                    logger.finer(generateSomeLogMessage())
                  }
          .fragment
            %p стало
            %pre
              %code
                :preserve
                  log(Log.FINER, () -> generateSomeLogMessage())

        %section
          %h1 Stream API
          %p новый подход к работе с коллекциями

        %section
          %h3 Collections API
          %ol
            %li.fragment Фокус на способах хранения данных
            %li.fragment Данные хранятся в памяти
            %li.fragment Изменяемая структура
            %li.fragment Внешнее управление итерациями
            %li.fragment Можно перебирать сколько угодно раз

        %section
          %h3 Stream API
          %ol
            %li.fragment Фокус на операциях обработки данных
            %li.fragment Новые данные поступают по требованию
            %li.fragment Источник данных неизменяем
            %li.fragment Внутреннее управление итерациями
            %li.fragment Можно перебрать только один раз

        %section
          %h3 Пример сравнения Collections и Stream API
          %p.fragment Задача: сгруппировать транзакции с суммой более 1000₽ по валютам
          .fragment
            %p Collections style
            %pre
              %code
                :preserve
                  Map&lt;Currency, List&lt;Transaction>> txnsByCurrencies = new HashMap&lt;>();
                  for (Transaction txn : txnList) {
                    if (txn.getPrice() > 1000) {
                      Currency currency = txn.getCurrency();
                      List&lt;Transaction> txnsForCurrency = txnsByCurrencies.get(currency);
                      if (txnsForCurrency == null) {
                        txnsForCurrency = new ArrayList&lt;>();
                        txnsByCurrencies.put(currency, txnsForCurrency);
                      }
                      txnsForCurrency.add(txn);
                    }
                  }
          .fragment
            %p Stream style
            %pre
              %code
                :preserve
                  Map&lt;Currency, List&lt;Transaction>> txnsByCurrencies = txnList
                      .stream()
                      .filter(t -> t.getPrice() > 1000)
                      .collect(Collectors.groupingBy(Transaction::getCurrency));
        
        %section
          %h3 Способы создания Stream-ов
          %ol
            %li.fragment
              %code Stream.of("Streams", "are", "cooler", "than", "collections")
            %li.fragment
              %code Stream.empty()
            %li.fragment
              %code collection.stream()
            %li.fragment
              %code Arrays.stream(new int[] {1, 3, 5, 7, 9})
            %li.fragment
              %code Files.lines(Paths.get("war_and_peace.txt"))
            %li.fragment
              %code Stream.iterate(0, n -> n + 2)
            %li.fragment
              %code Stream.generate(Math::random) //Supplier<T>

        %section
          %p java.util.stream.Stream&lt;T&gt
          .fragment
            %p java.util.stream.IntStream
            %p java.util.stream.LongStream
            %p java.util.stream.DoubleStream

        %section
          %h3 Промежуточные операции
          %ol
            %li.fragment 
              %p filter - фильтрация элементов
              %pre
                %code
                  stream.filter(x -> x > 1000)
            %li.fragment 
              %p limit - ограничение числа элементов
              %pre
                %code
                  stream.limit(5)
            %li.fragment 
              %p map - преобразование элементов
              %pre
                %code
                  stream.map(x -> x * x + 2 * x + 10)
            %li.fragment 
              %p flatMap - преобразование наборов элементов
              %pre
                %code
                  :preserve
                    sentences.stream()
                             .map(w -> w.split("\s+"))
                             .flatMap(Arrays::stream)
            %li.fragment 
              %p sorted - сортировка по указанному признаку
              %pre
                %code
                  stream.sorted(comparing(String::length))
            %li.fragment 
              %p distinct - исключение одинаковых элементов
              %pre
                %code
                  words.stream().distinct()

        %section
          %h3 Терминальные операции
          %ol
            %li.fragment 
              %p reduce - свертка в одно значение
              %pre
                %code
                  numbers.reduce(0, (acc, x) -> acc + x)
            %li.fragment
              %p count, sum, max, min
              %pre
                %code
                  words.count()
            %li.fragment
              %p anyMatch, allMatch, noneMatch - проверяет элементы
              %pre
                %code
                  numbers.anyMatch(x -> x % 10 == 0)
            %li.fragment
              %p findAny, findFirst
              %pre
                %code
                  :preserve
                    numbers.filter(x -> x % 10 == 0)
                           .findAny()
                           .ifPresent(x -> System.out.prinlf("Found: %d\n", x))
            %li.fragment
              %p forEach - перебор всех элементов
              %pre
                %code
                  words.forEach(System.out::println)
            %li.fragment 
              %p collect - обобщенная свертка 
              %pre
                %code
                  words.collect(groupingBy(word -> word.substring(0,1)))

        %section
          %h3 Коллекторы
          .fragment
            %code java.util.stream.Collectors
          .fragment
            %ol
              %li
                %code Collectors.counting()
              %li.fragment
                %code Collectors.maxBy(comparator)
              %li.fragment
                %code Collectors.summingInt(x -> x.getInt()), Collectors.averagingInt(x -> x.getInt())
              %li.fragment
                %code Collectors.joining(separator)
              %li.fragment
                %code Collectors.groupingBy(x -> x.getComeCategory())
              %li.fragment
                %code Collectors.partitioningBy(predicate)
              %li.fragment
                %code Collectors.reducing(init, valueGetter, aggregator)

        %section
          %h3 Параллельная обработка
          .fragment
            %pre
              %code
                :preserve
                  LongStream.rangeClosed(1L, 10_000_000_000L)
                            .filter(l -> l % 2 ==0)
                            .reduce(0L, Long::sum);
            %p 14,4 секунды на 8 ядрах
          .fragment vs
          .fragment
            %pre
              %code
                :preserve
                  LongStream.rangeClosed(1L, 10_000_000_000L)
                            .filter(l -> l % 2 == 0)
                            .parallel()
                            .reduce(0L, Long::sum);
            %p 5,8 секунд на 8 ядрах
        
        %section
          %h3 Особенности параллельной обработки
          %h4.fragment 1. Нужно учитывать источник данных
          %p.fragment Хорошо параллелизуются: ArrayList, IntStream.range(), HashSet, TreeSet
          %p.fragment Плохо параллелизуются: Stream.iterate(), LinkedList


        %section
          %h4 2. Использовать Thread-Safe консрукции
          .fragment
            %pre
              %code
                :preserve
                  public class Accumulator {
                     public long total = 0;
                     public void add(long value) {total += value; }
                  }
                  ...
                  Accumulator acc = new Accumulator();
                  LongStream.rangeClosed(1,n).parallel().forEach(acc::add);
                  return acc.total;

        %section
          %h3 Fork Join Pool
          %img(src='img/forkjoin.png')

        %section
          %h3 Work Stealing
          %img(src='img/workStealing.png')

        %section
          %h3 Optional&lt;T> - элегантный способ избежать NPE
          %ol
            %li.fragment
              %code Optional.empty()
            %li.fragment
              %code Optional.of(object) //throws NPE
            %li.fragment
              %code Optional.ofNullable(object)

        %section
          %h3 Получение значений из Optional
          %ol
            %li.fragment
              %code get() // throws NoSuchElementException
            %li.fragment
              %code orElse(T other)
            %li.fragment
              %code orElseGet(Supplier&lt;? extends T>)
            %li.fragment
              %code ifPresent(Consumer&lt;? supre T> consumer)

        %section
          %h3 Optional - пример
          .fragment
            %p Было
            %pre
              %code
                :preserve
                  if (person != null) {
                    Profile profile = person.getProfile();
                    if (profile != null) {
                      Photo photo = profile.getPhoto();
                        if (photo != null) {
                          return photo.getUrl();
                        }
                    }
                  }
                  return "Not found";
          .fragment
            %p Стало
            %pre
              %code
                :preserve
                  optPerson.flatMap(Person::getProfile)
                           .flatMap(Profile::getPhoto)
                           .map(Photo::getUrl)
                           .orElse("Not found")

        %section
          %h2 Функциональное программирование в Java 8
          %ol
            %li.fragment Композиция функций
            %li.fragment Рекурсия
            %li.fragment Currying

        %section
          %h3 Композиция функций
          %pre
            %code
              :preserve
                Function&lt;Integer, Integer> f = x -> x + 1;
                Function&lt;Integer, Integer> g = x -> x * 2;
                Function&lt;Integer, Integer> h = f.andThen(g);  // g(f(x))
                Function&lt;Integer, Integer> c = f.compose(g);  // f(g(x))
          .fragment
            %h3 Композиция предикатов
            %pre
              %code
                :preserve
                  Predicate&lt;Txn> rubles = txn -> txn.getCurrency() == RUR;
                  Predicate&lt;Txn> notRubles = rubles.negate();
                  Predicate&lt;Txn> manyRubles = rubles.and(txn -> txn.getAmount() > 5000);
                  Predicate&lt;Txn> manyRublesOrBucks = rubles.or(txn -> txn.getCurrency() == USD)
                                                           .and(txn -> txn.getAmount() > 5000);
        %section
          %h3 Рекурсия
          .fragment
            %p Пример рекурсии
            %pre
              %code
                :preserve
                  public long factorial(long n) {
                    return n == 1 ? 1 : n*factorial(n-1)
                  }
          .fragment
            %p Пример tail-рекурсии
            %pre
              %code
                :preserve
                  public long factorial(long n) {
                    return factorialTail(1, n)
                  }
                  private long factorialTail(long acc, long n) {
                    return n == 1 ? acc : factorialTail(acc * n, n - 1)
                  }
          %p.fragment К сожалению, оптимизации tail-рекусии в Java 8 нет :(((

        %section
          %h3 Currying (частичное применение функций)
          .fragment
            %pre
              %code
                :preserve
                  static double converter(double x, double factor, double bias) {
                    return factor * x + bias;
                  }
          .fragment
            %pre
              %code
                :preserve
                  static DoubleUnaryOperator curriedConverter(double factor, double bias) {
                    return (double x) -> converter(x, factor, bias)
                  }
          .fragment
            %pre
              %code
                :preserve
                  DoubleUnaryOperator convertCtoF = curriedConverter(9.0/5, 32);
                  DoubleUnaryOperator convertUSDtoRUR = curriedConverter(70.5, 0);

        %section
          %h3 Прочие нововведения
          %ol
            %li.fragment default методы в интерфейсах
            %li.fragment Spliterator
            %li.fragment CompletableFuture
            %li.fragment new Date and Time API
            %li.fragment 
              %p ... и много чего еще, смотри https://mango.qiwi.com/mlink/feed/NDQ1NzEw
              %img(src='img/mango.png')


        %section
          %h1 ВСЕМ СПАСИБО!

    %script{:type => "text/javascript", :src => "lib/js/head.min.js"}
    %script{:type => "text/javascript", :src => "js/reveal.min.js"}
    %script{:type => "text/javascript", :src => "js/init.js"}